// userDTO.ts

/**
 * Interface for creating a new user.
 * This is used when new users are being registered in the system.
 * It includes all the mandatory fields required to create a user account.
 */
export interface CreateUserDTO {
    username: string; // Unique identifier for the user, must be unique across the system.
    email: string;    // User's email address, used for communication and login.
    password: string; // Password for the user's account, stored securely.
    // Other properties such as 'firstName', 'lastName' could be added here.
  }
  /**
   * Interface for updating an existing user's information.
   * This is used to update mutable user details post-account creation.
   * Fields are optional, as updates may not necessarily touch all user attributes.
   */
  export interface UpdateUserDTO {
    username?: string; // New username if the user opts to change it.
    email?: string;    // New email address, if changed.
    // Add other updatable fields as optional, e.g., 'password', 'profilePictureUrl'.
  }
  /**
   * Interface for the structure of a user object when fetched from the backend.
   * This is typically used in user profile displays or for admin purposes to view user details.
   * It extends from the CreateUserDTO, inheriting its properties, with additional fields that are
   * generated upon user creation like 'id' and 'createdAt'.
   */
  export interface UserResponseDTO extends CreateUserDTO {
    id: string;        // Unique identifier for the user, generated by the system.
    createdAt: Date;   // Timestamp of when the user account was created.
    // Additional fields such as 'lastLogin' might be included to track user activity.
  }